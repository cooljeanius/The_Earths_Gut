#textdomain wesnoth-The_Earths_Gut

#define TEG_IF_HAVE_RECALL ID
    [if]
        [have_unit]
            id={ID}
            search_recall_list=yes
            x=recall
            y=recall
        [/have_unit]
        [then]
            [recall]
                id={ID}
            [/recall]
        [/then]
    [/if]
#enddef
#define RECALL_LOYAL_UNITS
    {TEG_IF_HAVE_RECALL Dulatus}
    {TEG_IF_HAVE_RECALL Aiglathing}
    {TEG_IF_HAVE_RECALL Clarissa}
    {TEG_IF_HAVE_RECALL Celylia}
    {TEG_IF_HAVE_RECALL Pelcatlus}
    {TEG_IF_HAVE_RECALL Krolock}
    {TEG_IF_HAVE_RECALL Elara}
#enddef

#define VACANT_HEX X Y VARIABLE
    [nearest_hex]
        x_source={X}
        y_source={Y}
        variable={VARIABLE}
        [not]
            [filter]
            [/filter]
        [/not]
        terrain=!,Xu,Qxu,Ql,Wo
        [not]
            x=0
        [/not]
        [not]
            y=0
        [/not]
    [/nearest_hex]
#enddef
#define TEG_STORE_MATCHING_UNITS VARIABLE KILL FILTER
    [store_unit]
        variable={VARIABLE}
        [filter]
            {FILTER}
        [/filter]
        kill={KILL}
    [/store_unit]
#enddef
#define TEG_UNSTORE_UNITS VARIABLE X_ Y_
    {FOREACH {VARIABLE} i_CurrentUnit}
        [unstore_unit]
            variable={VARIABLE}[$i_CurrentUnit]
            find_vacant=true
            check_passability=true
            fire_event=no
            x={X_}
            y={Y_}
        [/unstore_unit]
    {NEXT i_CurrentUnit}
#enddef

#I hate the order of arguments in the core macro
#define TEG_MOVE_UNIT_FAKE X1 Y1 X2 Y2 SIDE TYPE MODIFIERS
    [move_unit_fake]
        x={X1},{X2}
        y={Y1},{Y2}
        side={SIDE}
        type={TYPE}
        {MODIFIERS}
    [/move_unit_fake]
#enddef

###########################################################################################
#new leader switch stuff

#define TEG_UNIT_RESET VARIABLE_NAME
    {VARIABLE {VARIABLE_NAME}.hitpoints ${VARIABLE_NAME}.max_hitpoints}
    {VARIABLE {VARIABLE_NAME}.status.poisoned no}
    {VARIABLE {VARIABLE_NAME}.status.slowed no}
    {VARIABLE {VARIABLE_NAME}.moves ${VARIABLE_NAME}.max_moves}
    {VARIABLE {VARIABLE_NAME}.attacks_left ${VARIABLE_NAME}.max_attacks}
#enddef

# Assumptions for the following macro:
# 1. Used in prestart
# 2. The current leader Hamel is sitting on the starting location
# 3. The new leader Dulatus is stored in his variable
#define HAMEL_TO_DULATUS
    [store_unit]
        variable=u_Hamel
        [filter]
            id=Hamel
        [/filter]
        kill=yes
    [/store_unit]
    {VARIABLE u_Dulatus.canrecruit "yes"}
    {CLEAR_VARIABLE u_Dulatus.ellipse}
    [store_starting_location]
        variable=c_Start
    [/store_starting_location]
    {VARIABLE u_Dulatus.x $c_Start.x}
    {VARIABLE u_Dulatus.y $c_Start.y}
    {CLEAR_VARIABLE c_Start}
    [unstore_unit]
        variable=u_Dulatus
    [/unstore_unit]
    [remove_unit_overlay]
        x,y=$u_Dulatus.x,$u_Dulatus.y
        image="misc/hero-icon.png"
    [/remove_unit_overlay]
    # try that another way:
    [remove_object]
        x,y=$u_Dulatus.x,$u_Dulatus.y
        object_id="overlay_misc/hero-icon.png"
    [/remove_object]
    {CLEAR_VARIABLE u_Dulatus}
#enddef
# Assumptions for the following macro:
# 1. Used in prestart
# 2. The current leader Dulatus is sitting on the starting location
# 3. The new leader Hamel is stored in his variable
#define DULATUS_TO_HAMEL
    [store_unit]
        variable=u_Dulatus
        [filter]
            id=Dulatus
        [/filter]
    [/store_unit]
    [unit_overlay]
        x,y=$u_Dulatus.x,$u_Dulatus.y
        image="misc/hero-icon.png"
    [/unit_overlay]
    [store_unit]
        variable=u_Dulatus
        [filter]
            id=Dulatus
        [/filter]
        kill=yes
    [/store_unit]
    {VARIABLE u_Dulatus.canrecruit "no"}
    {VARIABLE u_Dulatus.ellipse "misc/ellipse-hero"}
    {VARIABLE u_Dulatus.x recall}
    {VARIABLE u_Dulatus.y recall}
    [unstore_unit]
        variable=u_Dulatus
        x,y=recall,recall
    [/unstore_unit]
    {CLEAR_VARIABLE u_Dulatus}
    [store_starting_location]
        variable=c_Start
    [/store_starting_location]
    {VARIABLE u_Hamel.x $c_Start.x}
    {VARIABLE u_Hamel.y $c_Start.y}
    {CLEAR_VARIABLE c_Start}
    [unstore_unit]
        variable=u_Hamel
    [/unstore_unit]
    {CLEAR_VARIABLE u_Hamel}
#enddef
###########################################################################################

#define APPLY_LOYAL_ICON ID_STRING
    #don't use for units with x,y=recall,recall
    [store_unit]
        [filter]
            id={ID_STRING}
        [/filter]
        variable=u_LoyalUnit
    [/store_unit]
    [if]
        [variable]
            name=u_LoyalUnit.length
            greater_than=0
        [/variable]
        [then]
            [unit_overlay]
                x=$u_LoyalUnit.x
                y=$u_LoyalUnit.y
                image="misc/loyal-icon.png"
            [/unit_overlay]
        [/then]
    [/if]
    {CLEAR_VARIABLE u_LoyalUnit}
#enddef

#define TEG_SHIP_PASSENGERS
    [event]
        name=moveto
        first_time_only=no
        [filter]
            side=1
            [filter_adjacent]
#ifdef __UNUSED__
                side=1
                type=Transport Ship
#endif
                role=accepts_passenger
            [/filter_adjacent]
            [not]
                type=Battleship,Galley,Transport Ship,Pirate Ship
            [/not]
        [/filter]
#ifdef DEBUG_MODE
        {DEBUG_MSG "Passenger check 1: ok"}
#endif
        #I don't know how to access the triggering ship, it seems not possible with second_unit, so manually detect one of the triggering ships (or THE triggering ship)
        #this filter must succeed, otherwise the event wouldn't have triggered
        [store_unit]
            variable=u_SecondUnit
            [filter]
                [filter_adjacent]
                    id=$unit.id
                [/filter_adjacent]
#ifdef __UNUSED__
                type=Transport Ship
                side=1
#endif
                role=accepts_passenger
            [/filter]
        [/store_unit]
        {CLEAR_VARIABLE u_SecondUnit.overlays}
#ifdef DEBUG_MODE
        {DEBUG_MSG "(u_SecondUnit coordinates: $u_SecondUnit.x|,$u_SecondUnit.y|)"}
#endif
        #store the unit to carry to the variables of the carrying ship
        [store_unit]
            variable=u_SecondUnit.variables.u_Passenger
            [filter]
                id=$unit.id
            [/filter]
            kill=yes
        [/store_unit]
        {VARIABLE u_SecondUnit.variables.u_Passenger.moves 0}
#ifdef DEBUG_MODE
        {DEBUG_MSG "u_SecondUnit.id: $u_SecondUnit.id"}
        {DEBUG_MSG "u_Second_unit.canrecruit: $u_SecondUnit.canrecruit"}
#endif

        {VARIABLE u_SecondUnit.role has_passenger}

#ifdef DEBUG_MODE
        {DEBUG_MSG "u_SecondUnit.variables.u_Passenger.id: $u_SecondUnit.variables.u_Passenger.id"}
#endif

        #store the ship's original id to its variables (that's the only key that's to be changed and that it had before)
        {VARIABLE u_SecondUnit.variables.s_OriginalId $u_SecondUnit.id}

#ifdef DEBUG_MODE
        {DEBUG_MSG "u_SecondUnit.variables.s_OriginalId: $u_SecondUnit.variables.s_OriginalId"}
#endif

        #change the ship's id, name, overlays, profile and canrecruit to the ones of the carried unit
        {VARIABLE u_SecondUnit.id $unit.id}
        {VARIABLE u_SecondUnit.name $unit.name}
        {VARIABLE u_SecondUnit.overlays $unit.overlays}
        {VARIABLE u_SecondUnit.profile $unit.profile}
        {VARIABLE u_SecondUnit.canrecruit $unit.canrecruit}

        #overwrite the unit on the map with the modified one
        [unstore_unit]
            variable=u_SecondUnit
            find_vacant=no
        [/unstore_unit]
        [remove_unit_overlay]
            x,y=$u_SecondUnit.x,$u_SecondUnit.y
            image="misc/accept-passenger.png"
        [/remove_unit_overlay]
        # try that another way:
        [remove_object]
            x,y=$u_SecondUnit.x,$u_SecondUnit.y
            object_id="overlay_misc/accept-passenger.png"
        [/remove_object]
        #apply an overlay using the carried unit's base image
        [unit_overlay]
            x,y=$u_SecondUnit.x,$u_SecondUnit.y
            image=$unit.image
        [/unit_overlay]
        {CLEAR_VARIABLE u_SecondUnit}
#ifdef DEBUG_MODE
        {DEBUG_MSG "Passenger check 3: ok(?)"}
#endif
    [/event]

    [event]
        name=prestart
        [set_menu_item]
            id=unload
            description=_"unload passenger"
            [show_if]
                [have_unit]
                    side=1
                    x,y=$x1,$y1
                    role=has_passenger
                    [filter_location]
                        [filter_adjacent_location]
                            terrain=!,Wo
                            count=6
                        [/filter_adjacent_location]
                    [/filter_location]
                [/have_unit]
            [/show_if]
            [command]
                {CLEAR_VARIABLE unit.role}
#ifdef DEBUG_MODE
                {DEBUG_MSG "unit.variables.s_OriginalId: $unit.variables.s_OriginalId"}
                {DEBUG_MSG "unit.overlays (FIXME: might not be the right key anymore): $unit.overlays"}
                {DEBUG_MSG "unit.canrecruit: $unit.canrecruit"}
                {DEBUG_MSG "unit.id: $unit.id"}
                {DEBUG_MSG "unit.role: $unit.role"}
#endif
                [modify_unit]
                    [filter] #
                        id=$unit.id
                    [/filter] #
                    role=""
                    profile=""
                    canrecruit=no
                    id=$this_unit.variables.s_OriginalId
                    [clear_variable]
                        name=s_OriginalId
                    [/clear_variable]
                [/modify_unit]
                #clear the other key it hadn't had previously:
                {CLEAR_VARIABLE unit.name}
                [remove_unit_overlay]
                    x,y=$unit.x,$unit.y
                    image=$unit.image
                [/remove_unit_overlay]
                # Try that another way:
                [lua]
                    code = <<
		local evt = wesnoth.current.event_context
		local unit = wesnoth.units.get(evt.x1, evt.y1)
		unit:remove_modifications({glob_on_id = 'overlay_units/*.png'}, 'object')
	>>
                [/lua]
                #unstore the original carried unit (it hasn't been changed :))
                [unstore_unit]
                    variable=unit.variables.u_Passenger
                    find_vacant=yes
                    x,y=$unit.x,$unit.y
                [/unstore_unit]
                {CLEAR_VARIABLE unit.variables.u_Passenger}
                #overwrite the unit on the map with the modified one
                [unstore_unit]
                    variable=unit
                    find_vacant=no
                [/unstore_unit]
                # One more try:
                [lua]
                    code = <<
		local evt = wesnoth.current.event_context
		local unit = wesnoth.units.get(evt.x1, evt.y1)
		unit:remove_modifications({glob_on_id = 'overlay_units/*.png'}, 'object')
	>>
                [/lua]
            [/command]
        [/set_menu_item]

        #unless the player activates it, a transport ship doesn't catch units moving next to it
        [set_menu_item]
            id=accept_passenger
            description=_"accept passenger"
            [show_if]
                [have_unit]
                    side=1
                    x,y=$x1,$y1
                    type=Transport Ship
                    [not]
                        role=has_passenger
                    [/not]
                    [not]
                        role=accepts_passenger
                    [/not]
                [/have_unit]
            [/show_if]
            [command]
                {VARIABLE unit.role accepts_passenger}
                [unstore_unit]
                    variable=unit
                [/unstore_unit]
                [unit_overlay]
                    x,y=$x1,$y1
                    image="misc/accept-passenger.png"
                [/unit_overlay]
            [/command]
        [/set_menu_item]

        #allow to deactivate acceptance of passengers
        [set_menu_item]
            id=deny_passenger
            description=_"deny passenger"
            [show_if]
                [have_unit]
                    x,y=$x1,$y1
                    role=accepts_passenger
                [/have_unit]
            [/show_if]
            [command]
                {CLEAR_VARIABLE unit.role}
                [unstore_unit]
                    variable=unit
                [/unstore_unit]
                [remove_unit_overlay]
                    x,y=$x1,$y1
                    image="misc/accept-passenger.png"
                [/remove_unit_overlay]
                # try that another way:
                [remove_object]
                    x,y=$u_SecondUnit.x,$u_SecondUnit.y
                    object_id="overlay_misc/accept-passenger.png"
                [/remove_object]
            [/command]
        [/set_menu_item]
    [/event]
    [event]
        name=victory
        [clear_menu_item]
            id=unload,accept_passenger,deny_passenger
        [/clear_menu_item]
    [/event]
#enddef

#--------------------------------------------------------------------------------------------------
# sighted event replacements

#define TEG_ON_SIGHTING_PASSIVE_FIRER ID SIGHTING_SIDE SIGHTED_SUF
    [event]
        name=moveto,recruit,recall,post advance
        [filter]
            {SIGHTED_SUF}
            [filter_vision]
                side={SIGHTING_SIDE}
            [/filter_vision]
        [/filter]
        [fire_event]
            name=sighting_{ID}
            [primary_unit]
                id=$unit.id
            [/primary_unit]
            [secondary_unit]
                side={SIGHTING_SIDE}
                [filter_location]
                    [filter]
                        {SIGHTED_SUF}
                    [/filter]
                    radius="$($this_unit.max_moves + 1)"
                [/filter_location]
            [/secondary_unit]
        [/fire_event]
    [/event]
#enddef

#define TEG_ON_SIGHTING_ACTIVE_FIRER ID SIGHTING_SIDE SIGHTED_SLF
    [event]
        name=moveto,recruit,recall,post advance
        first_time_only=no
        [filter]
            side={SIGHTING_SIDE}
        [/filter]
        [filter_condition]
            [variable]
                name=sighting_{ID}_was_fired
                equals=no
            [/variable]
        [/filter_condition]
        [store_reachable_locations]
            [filter]
                id=$unit.id
            [/filter]
            [filter_location]
                {SIGHTED_SLF}
            [/filter_location]
            range=vision
            variable=sighting_{ID}_reach
        [/store_reachable_locations]
        [if]
            [variable]
                name=sighting_{ID}_reach.length
                greater_than=0
            [/variable]
            [then]
                {CLEAR_FOG {SIGHTING_SIDE} $sighting_{ID}_reach.x $sighting_{ID}_reach.y 1}
                [fire_event]
                    name=sighting_{ID}
                    [primary_unit]
                        x=$sighting_{ID}_reach.x
                        y=$sighting_{ID}_reach.y
                    [/primary_unit]
                    [secondary_unit]
                        id=$unit.id
                    [/secondary_unit]
                [/fire_event]
            [/then]
            [else]
                [allow_undo]
                [/allow_undo]
            [/else]
        [/if]
        {CLEAR_VARIABLE sighting_{ID}_reach}
    [/event]
#enddef

#define TEG_ON_SIGHTING_FALLBACK ID SIGHTING_SIDE SIGHTED_SUF
    [event]
        name=side turn
        first_time_only=no
        [filter_condition]
            [variable]
                name=sighting_{ID}_was_fired
                equals=no
            [/variable]
            [have_unit]
                {SIGHTED_SUF}
                [filter_vision]
                    side={SIGHTING_SIDE}
                [/filter_vision]
            [/have_unit]
        [/filter_condition]
        [fire_event]
            name=sighting_{ID}
            [primary_unit]
                {SIGHTED_SUF}
            [/primary_unit]
            [secondary_unit]
                side={SIGHTING_SIDE}
            [/secondary_unit]
        [/fire_event]
    [/event]
#enddef

#define TEG_ON_SIGHTING_COMMON ID ACTION_WML
    [event]
        name=prestart
        {VARIABLE sighting_{ID}_was_fired no}
    [/event]
    [event]
        name=sighting_{ID}
        {VARIABLE sighting_{ID}_was_fired yes}
        {ACTION_WML}
        {UNCLEAR_FOG}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE sighting_{ID}_was_fired}
    [/event]
#enddef

#define TEG_ON_SIGHTING ID SIGHTING_SIDE SIGHTED_SUF ACTION_WML
    {TEG_ON_SIGHTING_PASSIVE_FIRER {ID} {SIGHTING_SIDE} ({SIGHTED_SUF})}
    {TEG_ON_SIGHTING_ACTIVE_FIRER {ID} {SIGHTING_SIDE} (
        [filter]
            {SIGHTED_SUF}
        [/filter]
    )}
    {TEG_ON_SIGHTING_COMMON {ID} ({ACTION_WML})}
    {TEG_ON_SIGHTING_FALLBACK {ID} {SIGHTING_SIDE} ({SIGHTED_SUF})}
#enddef

#define TEG_ON_SIGHTING_LOCATION ID SIGHTING_SIDE SIGHTED_SLF ACTION_WML
    {TEG_ON_SIGHTING_ACTIVE_FIRER {ID} {SIGHTING_SIDE} ({SIGHTED_SLF})}
    {TEG_ON_SIGHTING_COMMON {ID} ({ACTION_WML})}
#enddef

#--------------------------------------------------------------------------------------------------

#define RECALL_FROM_VARIABLE_ID_X_Y VARIABLE ID X Y
    [teg_recall_variable]
        variable={VARIABLE}
        id={ID}
        x={X}
        y={Y}
    [/teg_recall_variable]
#enddef
#define RECALL_FROM_VARIABLE_TYPES_X_Y VARIABLE TYPES X Y
    [teg_recall_variable]
        variable={VARIABLE}
        type={TYPES}
        x={X}
        y={Y}
    [/teg_recall_variable]
#enddef

#define TELEPORT_UNITS FILTER X Y CLEAR_SHROUD ANIMATE
    [store_unit]
        variable=WML_teleport_units_temp
        [filter]
            {FILTER}
        [/filter]
    [/store_unit]
    {FOREACH WML_teleport_units_temp iCurrentUnit}
        [teleport]
            [filter]
                id=$WML_teleport_units_temp[$iCurrentUnit].id
            [/filter]
            x={X}
            y={Y}
            clear_shroud={CLEAR_SHROUD}
            animate={ANIMATE}
            check_passability=yes
        [/teleport]
    {NEXT iCurrentUnit}
    {CLEAR_VARIABLE WML_teleport_units_temp}
#enddef

#define IF_NOT_HAVE_RECALL X Y TYPE
    [if]
        [not]
            [have_unit]
                x={X}
                y={Y}
            [/have_unit]
        [/not]
        [then]
            [recall]
                type={TYPE}
                x={X}
                y={Y}
            [/recall]
        [/then]
    [/if]
#enddef

#define IF_NOT_HAVE_CREATE X Y TYPE
    [if]
        [not]
            [have_unit]
                x={X}
                y={Y}
            [/have_unit]
        [/not]
        [then]
            {GENERIC_UNIT 1 {TYPE} {X} {Y}}
        [/then]
    [/if]
#enddef

#define IF_NOT_HAVE_CREATE_FOR_SIDE SIDE X Y TYPE
    [if]
        [not]
            [have_unit]
                x={X}
                y={Y}
            [/have_unit]
        [/not]
        [then]
            {GENERIC_UNIT {SIDE} {TYPE} {X} {Y}}
        [/then]
    [/if]
#enddef

################################################################
# doors

#define PLACE_DOOR SIDE DIRECTION X Y INDESTRUCTIBLE WML
    [place_door]
        side={SIDE}
        direction={DIRECTION}
        x={X}
        y={Y}
        indestructible={INDESTRUCTIBLE}
        {WML}
    [/place_door]
#enddef
#define PLACE_DOORS SIDE
    [store_locations]
        variable=doors
        terrain=*^egG/,*^egG\
    [/store_locations]
    {FOREACH doors current_door}
        [place_door]
            side={SIDE}
            direction=$doors[$current_door].terrain
            indestructible=no
            x=$doors[$current_door].x
            y=$doors[$current_door].y
        [/place_door]
    {NEXT current_door}
    {CLEAR_VARIABLE doors}
#enddef
#define DOOR_DEATH
    [event]
        name=last breath
        id=door_death
        first_time_only=no
        [filter]
            type=Door,Indestructible_Door
        [/filter]
        [terrain]
            layer=overlay
            terrain="^"
            x=$x1
            y=$y1
        [/terrain]
        [redraw]
            clear_shroud=yes
        [/redraw]
    [/event]
#enddef
################################################################

#define SORT_UNITS_ARRAY VARIABLE
    {LUA units sort_units_array (variable={VARIABLE})}
#enddef

################################################################

#define RECALL_EVERYONE
    [while]
        [have_unit]
            x,y=recall,recall
            search_recall_list=yes
        [/have_unit]
        [do]
            [recall]
            [/recall]
        [/do]
    [/while]
#enddef

#define SLOWED_IF_EASY
    [+unit]
        [+status]
#ifdef EASY
            slowed=yes
#else
            my_custom_key=yes
#endif
        [/status]
    [/unit]
#enddef

# based on GIVE_MALIN_EXPERIENCE from DiD, except tweaked to accept arbitrary units:
#define GIVE_UNIT_EXPERIENCE ID EXP
    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=teg_gainer
    [/store_unit]

    {VARIABLE experience_gained {EXP}}
    {VARIABLE_OP teg_gainer.experience add $experience_gained|}
    [floating_text]
        x,y=$teg_gainer.x,$teg_gainer.y
        # wmllint: general spelling exp
        text="<span color='#800080'>" + _ "+$experience_gained| exp" + "</span>"
    [/floating_text]
    {CLEAR_VARIABLE experience_gained}

    [unstore_unit]
        variable=teg_gainer
    [/unstore_unit]

    {CLEAR_VARIABLE teg_gainer}
#enddef
